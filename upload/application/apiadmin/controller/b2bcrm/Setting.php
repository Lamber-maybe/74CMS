<?php

namespace app\apiadmin\controller\b2bcrm;

use app\common\controller\Backend;
use app\common\lib\cron\CrmCustomerFallSeas;
use Think\Db;
use think\Validate;


class Setting extends Backend
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        if (!request()->isPost()) {
            // 所有接口采用POST传参
            $this->ajaxReturn(500, '非法请求');
        }
    }


    /**
     * 获取所有客户等级(生命周期)
     * @return void
     */
    public function lifeCycleAll()
    {
        try {
            $lifeCycleModel = model('b2bcrm.CrmLifeCycle');
            $res = $lifeCycleModel->getDate();
            $data['res'] = $res;
            $data['open_count'] = $lifeCycleModel->where(['is_open' => 1, 'id' => ['elt', 6]])->count();
            if (false === $res) {
                $this->ajaxReturn(500, '数据获取失败');
            } else {
                $this->ajaxReturn(200, '数据获取成功', $data);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * 获取指定客户等级(生命周期)
     * @return void
     */
    public function lifeCycleOne()
    {
        try {
            $id = input('post.id/d', 0, 'intval');
            if (!isset($id) || empty($id)) {
                $this->ajaxReturn(500, '请选择生命周期');
            }
            $lifeCycleModel = model('b2bcrm.CrmLifeCycle');
            $res = $lifeCycleModel->getDate($id);
            if (false === $res) {
                $this->ajaxReturn(500, '数据获取失败');
            } else {
                $this->ajaxReturn(200, '数据获取成功', $res);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * 获取所有客户等级(生命周期)
     * @return void
     */
    public function lifeCycleSwitch()
    {
        // 接受请求参数
        $input_data = [
            'is_open' => input('post.is_open/d', 0, 'intval'),  // 是否关闭 bool 0:否;1:是
            'id' => input('post.id/d', 0, 'intval')     // 生命周期ID
        ];

        // Validate验证规则
        $rule = [
            'is_open' => 'require|boolean',
            'id' => 'require|integer',
        ];

        // Validate报错信息
        $msg = [
            'is_open.require' => '请选择开启状态',
            'is_open.boolean' => '请选择正确的开启状态',
            'id.require' => '请选择生命周期阶段',
            'id.integer' => '请选择正确的生命周期阶段',
        ];

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        $lifeCycleModel = model('b2bcrm.CrmLifeCycle');

        // 查询要修改的生命周期
        try {
            $life_cycle = $lifeCycleModel->find($input_data['id']);
            if (null === $life_cycle) {
                $this->ajaxReturn(500, '生命周期阶段不存在');
            } else {
                $use_lables = model('Company')
                    ->where(['life_cycle_id' => $input_data['id']])
                    ->find();
                if (!empty($use_lables)) {
                    $this->ajaxReturn(500, '当前生命周期下有客户，不可关闭');
                }
                $life_cycle = $life_cycle->toArray();
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }

        // 判断是否为系统内置不可修改项
        switch ($life_cycle['is_system']) {
            case 0:
                break;

            case 1:
                $this->ajaxReturn(500, '该生命周期阶段为系统内置项不可修改');

            default:
                $this->ajaxReturn(500, '生命周期阶段信息异常');

        }

        if ($life_cycle['is_open'] === $input_data['is_open']) {
            $this->ajaxReturn(500, '生命周期阶段开启状态未发生变化');
        }

        try {
            $lifeCycleModel = model('b2bcrm.CrmLifeCycle');
            $update_result = $lifeCycleModel->switch($input_data['id'], $input_data['is_open']);
            if ($update_result) {
                model('AdminLog')->writeLog(
                    '修改CRM设置，客户生命周期',
                    $this->admininfo,
                    0,
                    3
                );
                $this->ajaxReturn(200, '操作成功');
            } else {
                $this->ajaxReturn(500, '操作失败');
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * 编辑客户等级(生命周期)阶段名
     * @return void
     */
    public function lifeCycleEdit()
    {
        // 接受请求参数
        $input_data = [
            'name' => input('post.name/s', '', 'trim'),  // 生命周期阶段名
            'id' => input('post.id/d', 0, 'intval')     // 生命周期ID
        ];

        // Validate验证规则
        $rule = [
            'name' => 'require|length:1,6',
            'id' => 'require|integer',
        ];

        // Validate报错信息
        $msg = [
            'name.require' => '请输入生命周期阶段名',
            'name.length' => '请输入1~6位生命周期阶段名',
            'id.require' => '请选择生命周期阶段',
            'id.integer' => '请选择正确的生命周期阶段',
        ];

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        $lifeCycleModel = model('b2bcrm.CrmLifeCycle');

        // 查询要修改的生命周期
        try {
            $life_cycle = $lifeCycleModel->find($input_data['id']);
            if (null === $life_cycle) {
                $this->ajaxReturn(500, '生命周期阶段不存在');
            } else {
                $life_cycle = $life_cycle->toArray();
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }


        if ($life_cycle['name'] === $input_data['name']) {
            $this->ajaxReturn(500, '生命周期阶段名未发生变化');
        }

        try {
            $lifeCycleModel = model('b2bcrm.CrmLifeCycle');
            $update_result = $lifeCycleModel->rename($input_data['id'], $input_data['name']);
            if ($update_result) {
                model('AdminLog')->writeLog(
                    '修改CRM设置，客户生命周期',
                    $this->admininfo,
                    0,
                    3
                );
                $this->ajaxReturn(200, '生命周期阶段名修改成功');
            } else {
                $this->ajaxReturn(500, '生命周期阶段名修改失败');
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * 获取CRM系统配置项
     * @return void
     */
    public function getSysConfigByCategory()
    {
        $category = input('post.category/s', '', 'trim');  // 是否关闭 bool 0:否;1:是
        $need_admin = 0;

        switch ($category) {
            case 'customer':
                // 客户配置
                $need_admin = 1;
                break;

            case 'thread':
                // 线索配置
                break;

            default:
                $this->ajaxReturn(500, 'CRM配置分类不存在');
        }

        try {
            $lifeCycleModel = model('b2bcrm.CrmSysConfig');
            $res = $lifeCycleModel->getDateByCategory($category);
            if (false === $res) {
                $this->ajaxReturn(500, '数据获取失败');
            } else {
                $arr = [];
                foreach ($res as $k => $v) {
                    $arr[$v['key']]['is_open'] = $v['is_open'];
                    $arr[$v['key']]['name'] = $v['name'];
                    $arr[$v['key']]['value'] = $v['value'];
                    $arr[$v['key']]['is_system'] = $v['is_system'];
                    $arr[$v['key']]['remark'] = $v['remark'];
                }

                if ($need_admin === 1) {
                    $arr['admin_id'] = model('b2bcrm.CrmAutoAssign')
                        ->alias('caa')
                        ->join(
                            config('database.prefix') . 'admin a',
                            'caa.admin_id=a.id',
                            'LEFT'
                        )
                        ->where('caa.type', 2) // yx-2023.03.17【剔除已锁定的管理员账号】
                        ->where('a.status', 1) // yx-2023.03.17【剔除已锁定的管理员账号】
                        ->column('admin_id');
                }

                $this->ajaxReturn(200, '数据获取成功', $arr);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }

    }


    /**
     * 编辑CRM系统配置项
     * @return void
     */
    public function sysConfigEdit()
    {
        // 接受请求参数
        $input_data = [
            'value' => input('post.value/d', 0, 'intval'),  // 系统配置项值
            'id' => input('post.id/d', 0, 'intval')     // 系统配置项ID
        ];

        switch ($input_data['id']) {
            case 0:
                $this->ajaxReturn(500, '请选择要修改的配置项');

            case 5:
            case 10:
            case 11:
                $value_rule = 'require|boolean';
                $value_msg = '请选择正确的配置值';
                break;

            default:
                $value_rule = 'require|between:0,365';
                $value_msg = '请输入0~365范围内的配置值';
                break;

        }

        // Validate验证规则
        $rule = [
            'value' => $value_rule,
            'id' => 'require|integer',
        ];

        // Validate报错信息
        $msg = [
            'value' => $value_msg,
            'id.require' => '请选择配置项',
            'id.integer' => '请选择正确的配置项',
        ];

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        $crmSysConfigModel = model('b2bcrm.CrmSysConfig');

        // 查询要修改的CRM系统配置项
        try {
            $crm_sys_config = $crmSysConfigModel->find($input_data['id']);
            if (null === $crm_sys_config) {
                $this->ajaxReturn(500, '系统配置项不存在');
            } else {
                $life_cycle = $crm_sys_config->toArray();
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }


        if ($crm_sys_config['value'] === $input_data['value']) {
            $this->ajaxReturn(500, '系统配置项未发生变化');
        }

        try {
            $update_result = $crmSysConfigModel->toConfigure($input_data['id'], $input_data['value']);
            if ($update_result) {
                $this->ajaxReturn(200, '系统配置项修改成功');
            } else {
                $this->ajaxReturn(500, '系统配置项修改失败');
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * 获取CRM所有客户标签
     * @return void
     */
    public function getAllCrmTags()
    {
        try {
            $crmTagModel = model('b2bcrm.CrmTag');
            $res = $crmTagModel->getAllTags();
            if (false === $res) {
                $this->ajaxReturn(500, '数据获取失败');
            } else {
                $this->ajaxReturn(200, '数据获取成功', $res);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * 新增CRM客户标签
     * @return void
     */
    public function addCrmTag()
    {
        // 接受请求参数
        $input_data = [
            'name' => input('post.name/s', '', 'trim'),  // 标签名
            'order' => input('post.order/d', 0, 'intval')     // 标签排序
        ];

        // Validate验证规则
        $rule = [
            'name' => 'require|length:1,10',
            'order' => 'require|integer|between:0,1000',
        ];

        // Validate报错信息
        $msg = [
            'name' => '请输入1~10个字符的标签名',
            'order' => '请输入0~1000范围内的排序',
        ];

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        try {
            $crmTagModel = model('b2bcrm.CrmTag');
            $res = $crmTagModel->addTag($input_data);
            if (false === $res) {
                $this->ajaxReturn(500, '新增标签失败');
            } else {
                model('AdminLog')->writeLog(
                    '修改CRM设置，标签新增，标签名称:' . $input_data['name'] . '，排序:' . $input_data['order'],
                    $this->admininfo,
                    0,
                    2
                );
                $this->ajaxReturn(200, '新增标签成功');
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * 删除CRM客户标签
     * @return void
     */
    public function delCrmTag()
    {
        $tagId = input('post.id/d', 0, 'intval');

        $crmTagModel = model('b2bcrm.CrmTag');
        $crm_tag_info = $crmTagModel->find($tagId);

        if (null === $crm_tag_info) {
            $this->ajaxReturn(500, '要删除的标签不存在');
        }
        $use_lables = model('Company')
            ->where("find_in_set($tagId,labels)")
            ->find();
        if (!empty($use_lables)) {
            $this->ajaxReturn(500, '该标签已被使用，请勿删除！');
        }
        try {
            $res = $crmTagModel->delTag($tagId);
            if (false === $res) {
                $this->ajaxReturn(500, '标签删除失败');
            } else {
                model('AdminLog')->writeLog(
                    '修改CRM设置，标签删除，标签名称:' . $crm_tag_info['name'] . '，排序:' . $crm_tag_info['order'],
                    $this->admininfo,
                    0,
                    4
                );
                $this->ajaxReturn(200, '标签删除成功');
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }

    }


    /**
     * 编辑CRM客户标签
     * @return void
     */
    public function editCrmTag()
    {
        // 接受请求参数
        $input_data = [
            'id' => input('post.id/d', 0, 'intval'),  // 标签ID
            'name' => input('post.name/s', '', 'trim'),  // 标签名
            'order' => input('post.order/d', 0, 'intval')     // 标签排序
        ];

        // Validate验证规则
        $rule = [
            'id' => 'require|integer',
            'name' => 'require|length:1,10',
            'order' => 'require|integer|between:0,1000',
        ];

        // Validate报错信息
        $msg = [
            'id' => '请选择要编辑的标签',
            'name' => '请输入1~10个字符的标签名',
            'order' => '请输入0~1000范围内的排序'
        ];

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }


        $crmTagModel = model('b2bcrm.CrmTag');
        $crm_tag_info = $crmTagModel->find($input_data['id']);

        if (null === $crm_tag_info) {
            $this->ajaxReturn(500, '要编辑的标签不存在');
        }

        try {
            $crmTagModel = model('b2bcrm.CrmTag');
            $res = $crmTagModel->editTag($input_data);
            if (false === $res) {
                $this->ajaxReturn(500, '标签修改失败');
            }

            $log_field = '修改CRM设置，标签设置，标签名称:' . $crm_tag_info['name'];
            if ($input_data['name'] != $crm_tag_info['name']) {
                $log_field .= '->' . $input_data['name'];
            }
            if ($input_data['order'] != $crm_tag_info['order']) {
                $log_field .= '，排序:' . $crm_tag_info['order'] . '->' . $input_data['order'];
            }
            model('AdminLog')->writeLog(
                $log_field,
                $this->admininfo,
                0,
                3
            );
            $this->ajaxReturn(200, '标签修改成功');

        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * CRM线索自动分配规则配置
     * @return void
     */
    public function clueAutoAssign()
    {
        $admin_ids = input('post.admin_ids/a', []);
        if (!is_array($admin_ids) || empty($admin_ids)) {
            $this->ajaxReturn(500, '请选择线索自动分配线索的销售');
        }

        try {
            $crmAutoAssignModel = model('b2bcrm.CrmAutoAssign');
            $result = $crmAutoAssignModel->writeAutoAssignAdminIds($admin_ids, 1);
            if (false === $result) {
                $this->ajaxReturn(500, '线索自动分配修改失败');
            } else {
                $this->ajaxReturn(200, '线索自动分配修改成功');
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }

    }


    /**
     * CRM客户自动分配规则配置
     * @return void
     */
    public function customerAutoAssign($admin_ids)
    {
        $crmAutoAssignModel = model('b2bcrm.CrmAutoAssign');
        $result = $crmAutoAssignModel->writeAutoAssignAdminIds($admin_ids, 2);
        if (false === $result) {
            throw new \Exception('客户自动分配修改失败');
        }
        return true;

    }

    /*
     * 编辑crm配置
     * */
    public function editConfig()
    {
        $inputdata = input('post.');
        $configlist = model('b2bcrm.CrmSysConfig')->column('key,id');
        $admin_id = input('post.admin_id/a', []);

        try {
            $fieldKeys = array_keys($inputdata);
            $fieldList = model('b2bcrm.CrmSysConfig')
                ->whereIn('key', $fieldKeys)
                ->column('*', 'id');
            if (null === $fieldList) {
                $this->ajaxReturn(500, '没有要修改的CRM设置项');
            }

            $category = model('b2bcrm.CrmSysConfig')->whereIn('key', $fieldKeys)
                ->value('category');
            switch ($category) {
                case 'customer':
                    $log_field = '修改CRM设置，客户配置';
                    break;

                case 'thread':
                    $log_field = '修改CRM设置，线索设置';
                    break;

                default:
                    $this->ajaxReturn(500, '错误的CRM设置项');
                    break;
            }

            if (isset($inputdata['customer_allocation_rule']['value']) && $inputdata['customer_allocation_rule']['value'] == 1) {
                if (!is_array($admin_id) || empty($admin_id)) {
                    $this->ajaxReturn(500, '请选择客户自动分配线索的销售');
                }
                $this->customerAutoAssign($admin_id);
                $admin_list = model('Admin')
                    ->whereIn('id', $admin_id)
                    ->field('username')
                    ->select();
            }

            if (isset($inputdata['customer_total_limit']['value'])) {
                $admin_id_arr = model('Admin')->column('id');
                foreach ($admin_id_arr as $adminId) {
                    $customer_total_now = model('Company')
                        ->where([
                            'admin_id' => $adminId
                        ])
                        ->count();
                    if ($customer_total_now >= $inputdata['customer_total_limit']['value']) {
                        $exceed_result = model('Admin')
                            ->where('id', $adminId)
                            ->update(['customer_exceed' => 1]);
                    } else {
                        $exceed_result = model('Admin')
                            ->where('id', $adminId)
                            ->update(['customer_exceed' => 0]);
                    }

                    if (false === $exceed_result) {
                        throw new \Exception(model('Admin')->getError());
                    }
                }
            }

            $sqldata = [];
            foreach ($inputdata as $key => $value) {
                if (!isset($configlist[$key])) {
                    continue;
                }
                $arr['id'] = $configlist[$key];
                $arr['key'] = $key;
                $arr['name'] = isset($value['name']) ? $value['name'] : '';
                $arr['value'] = isset($value['value']) ? $value['value'] : 0;
                $arr['is_open'] = isset($value['is_open']) ? $value['is_open'] : 0;

                $sqldata[] = $arr;
            }

            Db::startTrans();

            $save_result = model('b2bcrm.CrmSysConfig')
                ->isUpdate()
                ->saveAll($sqldata);
            if (false === $save_result) {
                throw new \Exception(model('b2bcrm.CrmSysConfig')->getError());
            }

            $log_result = model('AdminLog')->writeLog(
                $log_field,
                $this->admininfo,
                0,
                3
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            Db::commit();
            $this->ajaxReturn(200, '保存数据成功');
        } catch (\Exception $e) {
            Db::rollback();
            $this->ajaxReturn(500, $e->getMessage());
        }
    }

}