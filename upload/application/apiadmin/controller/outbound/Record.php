<?php
/**
 * 呼叫中心
 * --外呼记录
 */

namespace app\apiadmin\controller\outbound;

use app\common\controller\Backend;
use app\common\lib\outbound\xiaojianke\CallRecord;

class Record extends Backend
{
    /**
     * 外呼配置信息
     * @var array|mixed
     */
    private $account_config = [];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $apiConfig = config('global_config.account_outbound');

        if (empty($apiConfig['app_secret']) || empty($apiConfig['app_id'])) {
            switch ($this->action_name) {
                case 'index':
                    $return = [
                        'total' => 0,
                        'per_page' => 0,
                        'current_page' => 0,
                        'last_page' => 0,
                        'data' => []
                    ];
                    $this->ajaxReturn(200, 'success', $return);
                    break;

                case 'details':
                    $this->ajaxReturn(500, '请先完成外呼配置');
                    break;

                default:
                    $this->ajaxReturn(500, '非法请求');
                    break;
            }
        }

        $this->account_config = $apiConfig;
    }

    /**
     * @Purpose:
     * 获取外呼记录列表
     * @Method index()
     *
     * @param date $start_time 通话开始时间
     * @param date $end_time 通话结束时间
     * @param integer $page_size 每页显示条数
     * @param string $keyword 关键字检索[成员名称]
     *
     * @return Jsonp
     *
     * @link {domain}outbound/record/index
     *
     * @author  yx
     * @version 1.1
     * @since   2022/9/21
     */
    public function index()
    {
        $param = [
            'start_time' => input('post.start_time/s', '', 'trim'), // 通话开始时间
            'end_time' => input('post.end_time/s', '', 'trim'), // 通话结束时间
            'is_connect' => input('post.is_connect/d', 0, 'intval'), // 是否接通【0:全部;1:是;2:否】
            'contact_mobile' => input('post.contact_mobile/s', '', 'trim'), // 员工手机号
            'call_duration_type' => input('post.call_duration_type/d', 0, 'intval'), // 通话时长类型：1|30秒以内，2|30秒~1分钟，3|1分钟~3分钟，4|3分钟以上
            'order_key' => input('post.order_key/d', 0, 'intval'), // 排序字段：1|呼叫记录，2|通话日期
            'order_by' => input('post.order_by/s', '', 'trim'), // 排序方式：asc|升序，desc|降序
            'page' => input('post.page/d', 1, 'intval'), // 当前页
            'per_page' => input('post.per_page/d', 10, 'intval') // 每页显示条数
        ];

        $list_type = input('post.list_type/s', '', 'trim'); // 列表类型【all:全部;mine:我的】

        switch ($list_type) {
            case 'all':
                $param['staff_mobile'] = input('post.staff_mobile/s', '', 'trim'); // 员工手机号
                break;

            case 'mine':
                $param['seat_number'] = model('outbound.OutbountSeats')
                    ->where('admin_id', $this->admininfo->id)
                    ->value('seat_number');
                if (empty($param['seat_number'])) {
                    $return = [
                        'total' => 0,
                        'per_page' => 0,
                        'current_page' => 0,
                        'last_page' => 0,
                        'data' => []
                    ];
                    $this->ajaxReturn(200, 'success', $return);
                }
                break;

            default:
                $this->ajaxReturn(500, '参数错误');
        }

        try {
            $callRecord = new CallRecord($param, $this->account_config);
            $result = $callRecord->getRecordList();
            if (false === $result) {
                $this->ajaxReturn($callRecord->getErrorCode(), $callRecord->getError());
            } else {
                if (isset($result['data']) && !empty($result['data'])) {
                    $return = $result['data'];
                } else {
                    $return = [
                        'total' => 0,
                        'per_page' => 0,
                        'current_page' => 0,
                        'last_page' => 0,
                        'data' => []
                    ];
                }
                $this->ajaxReturn(200, 'success', $return);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * @Purpose:
     * 获取外呼记录明细列表
     * @Method details()
     *
     * @param string $group_id 会话组ID
     * @param integer $page 当前页
     * @param integer $per_page 每页显示条数
     *
     * @return Jsonp
     *
     * @link {domain}outbound/record/details
     *
     * @author  yx
     * @version 1.1
     * @since   2022/9/27
     *
     */
    public function details()
    {
        $param = [
            'group_id' => input('post.group_id/s', '', 'trim'), // 会话组ID
            'page' => input('post.page/d', 1, 'intval'), // 当前页
            'per_page' => input('post.per_page/d', 10, 'intval') // 每页显示条数
        ];

        try {
            $callRecord = new CallRecord($param, $this->account_config);
            $result = $callRecord->getRecordDetailList();
            if (false === $result) {
                $this->ajaxReturn($callRecord->getErrorCode(), $callRecord->getError());
            } else {
                if (isset($result['data']) && !empty($result['data'])) {
                    $return = $result['data'];
                    if (!empty($return['data'])) {
                        foreach ($return['data'] as $key => $value) {
                            if ($value['call_duration'] > 0) {
                                $call_minute = intval($value['call_duration'] / 60) < 10
                                    ? '0' . intval($value['call_duration'] / 60)
                                    : intval($value['call_duration'] / 60);
                                $call_second = $value['call_duration'] % 60 < 10
                                    ? '0' . $value['call_duration'] % 60
                                    : $value['call_duration'] % 60;;
                                $return['data'][$key]['call_duration_time'] = $call_minute . ':' . $call_second;
                            } else {
                                $return['data'][$key]['call_duration_time'] = '00:00';
                            }
                        }
                    }
                } else {
                    $return = [
                        'total' => 0,
                        'per_page' => 0,
                        'current_page' => 0,
                        'last_page' => 0,
                        'data' => []
                    ];
                }
                $this->ajaxReturn(200, 'success', $return);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }
}