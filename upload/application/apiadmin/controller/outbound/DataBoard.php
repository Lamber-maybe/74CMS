<?php
/**
 * 呼叫中心
 * --数据看板
 */

namespace app\apiadmin\controller\outbound;

use app\common\controller\Backend;
use app\common\lib\outbound\xiaojianke\Statistics;

class DataBoard extends Backend
{
    /**
     * 外呼配置信息
     * @var array|mixed
     */
    private $account_config = [];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $apiConfig = config('global_config.account_outbound');

        if (empty($apiConfig['app_secret']) || empty($apiConfig['app_id'])) {
            switch ($this->action_name) {
                case 'callrecord':
                    $return = [
                        'call_total' => 0,
                        'connect_total' => 0,
                        'not_connect_total' => 0,
                        'call_duration' => 0,
                        'call_duration_name' => '0秒',
                        'setmeal_surplus_duration' => 0,
                        'setmeal_endtime' => 0
                    ];
                    $this->ajaxReturn(200, 'success', $return);
                    break;

                case 'seatcallrecord':
                    $this->ajaxReturn(200, 'SUCCESS', []);
                    break;

                case 'callrecordlist':
                    $return = [
                        'legend' => [
                            '呼出总数',
                            '接通总数',
                            '未接通总数',
                            '通话时长'
                        ],
                        'xAxis' => [
                            date('m/d', strtotime('-6 day')),
                            date('m/d', strtotime('-5 day')),
                            date('m/d', strtotime('-4 day')),
                            date('m/d', strtotime('-3 day')),
                            date('m/d', strtotime('-2 day')),
                            date('m/d', strtotime('-1 day')),
                            date('m/d'),
                        ],
                        'series' => [
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0]
                        ]
                    ];
                    $this->ajaxReturn(200, 'SUCCESS', $return);
                    break;

                default:
                    $this->ajaxReturn(500, '非法请求');
                    break;
            }

        }

        $this->account_config = $apiConfig;
    }


    /**
     * @Purpose:
     * 获取呼叫记录统计
     * @Method POST
     *
     * @param null
     *
     * @return Jsonp
     *
     * @link {domain}outbound/data_board/callRecord
     *
     * @author  yx
     * @version 1.1
     * @since   2022/9/28
     */
    public function callRecord()
    {
        $param['seat_id'] = model('outbound.OutbountSeats')
            ->where('admin_id', $this->admininfo->id)
            ->value('seat_id');

        try {
            $statistics = new Statistics($param, $this->account_config);
            $result = $statistics->getCallRecord();
            if (false === $result) {
                $this->ajaxReturn($statistics->getErrorCode(), $statistics->getError());
            }

            if (!isset($result['data']) || empty($result['data'])) {
                $return = [
                    'call_total' => 0,
                    'connect_total' => 0,
                    'not_connect_total' => 0,
                    'call_duration' => 0,
                    'call_duration_name' => '0秒',
                    'setmeal_surplus_duration' => 0,
                    'setmeal_endtime' => 0
                ];
                $this->ajaxReturn(200, 'SUCCESS', $return);
            } else {
                foreach ($result['data'] as $key => &$data) {
                    switch ($key) {
                        case 'call_duration_name':
                            break;
                        default:
                            $data = intval($data);
                            break;
                    }
                }
                $this->ajaxReturn(200, 'SUCCESS', $result['data']);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * @Purpose:
     * 获取坐席呼叫记录统计
     * @Method POST
     *
     * @param string $call_start_time 通话开始时间
     * @param string $call_end_time 通话结束时间
     * @param integer $order_key 排序字段：1|呼出总数，2|接通总数，3|未接通总数，4|通话时长，5|平均通话时长，6|接通率
     * @param string $order_by 序方式：asc|升序，desc|降序
     *
     * @return Jsonp
     *
     * @link {domain}outbound/data_board/callRecord
     *
     * @author  yx
     * @version 1.1
     * @since   2022/9/28
     */
    public function seatCallRecord()
    {
        $param = [
            'call_start_time' => input('post.call_start_time/s', '2022-06-01', 'trim'), // 通话开始时间
            'call_end_time' => input('post.call_end_time/s', '2022-06-30', 'trim'), // 通话结束时间
            'order_key' => input('post.order_key/d', 0, 'intval'), // 排序字段：1|呼出总数，2|接通总数，3|未接通总数，4|通话时长，5|平均通话时长，6|接通率
            'order_by' => input('post.order_by/s', '', 'trim') // 排序方式：asc|升序，desc|降序
        ];

        if (empty($param['call_start_time']) || empty($param['call_end_time'])) {
            $param['call_start_time'] = date('Y-m-d', strtotime('-7 day')); // 通话开始时间
            $param['call_end_time'] = date('Y-m-d'); // 通话结束时间
        }

        $start_timestamp = strtotime($param['call_start_time']);
        $end_timestamp = strtotime($param['call_end_time']);
        $diff_days = ($end_timestamp - $start_timestamp) / 86400;

        if ($diff_days < 0) {
            $this->ajaxReturn('500', '查询时间段选择错误');
        }

        if ($diff_days > 30) {
            $this->ajaxReturn('500', '所选日期跨度最大不能超过30天');
        }

        try {
            $statistics = new Statistics($param, $this->account_config);
            $result = $statistics->getSeatCallRecord();
            if (false === $result) {
                $this->ajaxReturn($statistics->getErrorCode(), $statistics->getError());
            }

            if (!isset($result['data']) || empty($result['data'])) {
                $this->ajaxReturn(200, 'SUCCESS', []);
            } else {
                $this->ajaxReturn(200, 'SUCCESS', $result['data']);
            }
        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


    /**
     * @Purpose:
     * 获取呼叫记录统计列表
     * @Method POST
     *
     * @param string $call_start_time 通话开始时间
     * @param string $call_end_time 通话结束时间z
     *
     * @return Jsonp
     *
     * @link {domain}outbound/data_board/callRecordList
     *
     * @author  yx
     * @version 1.1
     * @since   2022/9/28
     */
    public function callRecordList()
    {
        $param = [
            'call_start_time' => input('post.call_start_time/s', '', 'trim'), // 通话开始时间
            'call_end_time' => input('post.call_end_time/s', '', 'trim'), // 通话结束时间
        ];

        if (empty($param['call_start_time']) || empty($param['call_end_time'])) {
            $param = [
                'call_start_time' => date('Y-m-d', strtotime('-7 day')), // 通话开始时间
                'call_end_time' => date('Y-m-d'), // 通话结束时间
            ];
        }

        $start_timestamp = strtotime($param['call_start_time']);
        $end_timestamp = strtotime($param['call_end_time']);
        $diff_days = ($end_timestamp - $start_timestamp) / 86400;

        if ($diff_days < 0) {
            $this->ajaxReturn('500', '查询时间段选择错误');
        }

        if ($diff_days > 30) {
            $this->ajaxReturn('500', '所选日期跨度最大不能超过30天');
        }

        try {
            $statistics = new Statistics($param, $this->account_config);
            $result = $statistics->getCallRecordList();
            if (false === $result) {
                $this->ajaxReturn($statistics->getErrorCode(), $statistics->getError());
            }
            $result_data = $result['data'];

            $xAxis = [];
            $simulate = [];

            for ($i = 0; $i <= $diff_days; $i++) {
                $xAxis[] = date('m/d', strtotime("+{$i} day", $start_timestamp));
                $simulate_key = strtotime("+{$i} day", $start_timestamp);
                $simulate[$simulate_key] = [
                    'call_total' => 0,
                    'connect_total' => 0,
                    'not_connect_total' => 0,
                    'call_duration' => 0,
                    'call_date' => strtotime("+{$i} day", $start_timestamp)
                ];
            }

            foreach ($result_data as $record) {
                if (array_key_exists($record['call_date'], $simulate)) {
                    $simulate[$record['call_date']] = [
                        'call_total' => !empty($record['call_total']) ? intval($record['call_total']) : 0,
                        'connect_total' => !empty($record['connect_total']) ? intval($record['connect_total']) : 0,
                        'not_connect_total' => !empty($record['not_connect_total']) ? intval($record['not_connect_total']) : 0,
                        'call_duration' => !empty($record['call_duration']) ? intval($record['call_duration']) : 0,
                        'call_date' => !empty($record['call_date']) ? intval($record['call_date']) : 0
                    ];
                }
            }

            foreach ($simulate as $tmp) {
                $call_total[] = $tmp['call_total'];
                $connect_total[] = $tmp['connect_total'];
                $not_connect_total[] = $tmp['not_connect_total'];
                $call_duration[] = $tmp['call_duration'];
            }

            $series = [
                $call_total,
                $connect_total,
                $not_connect_total,
                $call_duration
            ];

            $return_data = [
                'legend' => [
                    '呼出总数',
                    '接通总数',
                    '未接通总数',
                    '通话时长'
                ],
                'xAxis' => array_values($xAxis),
                'series' => $series
            ];

            $this->ajaxReturn(200, 'SUCCESS', $return_data);

        } catch (\Exception $e) {
            $this->ajaxReturn(500, $e->getMessage());
        }
    }


}